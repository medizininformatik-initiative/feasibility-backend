server:
  port: 8090
spring:
  application:
    name: dataportal-backend
  datasource:
    url: jdbc:postgresql://${DATABASE_HOST:localhost}:${DATABASE_PORT:5432}/${DATABASE_DBNAME:dataportal}
    username: ${DATABASE_USER:dataportaluser}
    password: ${DATABASE_PASSWORD:dataportalpw}
    driverClassName: org.postgresql.Driver
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: ${HIBERNATE_SHOW_SQL:false}
  flyway:
    locations: filesystem:${ONTOLOGY_DB_MIGRATION_FOLDER:ontology/migration},classpath:db/migration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_BASE_URL_ISSUER:http://localhost:8080}/realms/${KEYCLOAK_REALM:dataportal}
          jwk-set-uri: ${KEYCLOAK_BASE_URL_JWK:http://localhost:8080}/realms/${KEYCLOAK_REALM:dataportal}/protocol/openid-connect/certs

springdoc:
  swagger-ui:
    disable-swagger-default-url: true
    tryItOutEnabled: false
    path: /swagger-ui
    url: /v3/api-docs/swagger.yaml
management:
  endpoints:
    enabled-by-default: false
  endpoint:
    health:
      enabled: true
  health:
    elasticsearch:
      enabled: ${ELASTIC_SEARCH_ENABLED:true}
app:
  dseProfileTreeFile: ${DSE_PROFILE_TREE_FILE:ontology/dse/profile_tree.json}
  terminologySystemsFile: ${TERMINOLOGY_SYSTEMS_FILE:ontology/terminology_systems.json}
  mappingsFile: ${MAPPINGS_FILE:ontology/mapping_cql.json}
  conceptTreeFile: ${CONCEPT_TREE_FILE:ontology/mapping_tree.json}
  fhirTranslationEnabled: ${FHIR_TRANSLATE_ENABLED:false}
  cqlTranslationEnabled: ${CQL_TRANSLATE_ENABLED:true}
  apiBaseUrl: ${API_BASE_URL:}
  enableQueryValidation: ${QUERY_VALIDATION_ENABLED:true}
  keycloakAllowedRole: ${KEYCLOAK_ALLOWED_ROLE:DataportalUser}
  keycloakPowerRole: ${KEYCLOAK_POWER_ROLE:DataportalPowerUser}
  keycloakAdminRole: ${KEYCLOAK_ADMIN_ROLE:DataportalAdmin}
  queryResultExpiryMinutes: ${QUERYRESULT_EXPIRY_MINUTES:1}
  maxSavedQueriesPerUser: ${MAX_SAVED_QUERIES_PER_USER:10}
  broker:
    mock:
      enabled: ${BROKER_CLIENT_MOCK_ENABLED:false}
    direct:
      auth:
        basic:
          username: ${BROKER_CLIENT_DIRECT_AUTH_BASIC_USERNAME:}
          password: ${BROKER_CLIENT_DIRECT_AUTH_BASIC_PASSWORD:}
        oauth:
          issuer:
            url:  ${BROKER_CLIENT_DIRECT_AUTH_OAUTH_ISSUER_URL:}
          client:
            id: ${BROKER_CLIENT_DIRECT_AUTH_OAUTH_CLIENT_ID:}
            secret: ${BROKER_CLIENT_DIRECT_AUTH_OAUTH_CLIENT_SECRET:}
      enabled: ${BROKER_CLIENT_DIRECT_ENABLED:false}
      obfuscateResultCount: ${BROKER_CLIENT_OBFUSCATE_RESULT_COUNT:false}
      cql:
        enabled: ${BROKER_CLIENT_DIRECT_USE_CQL:false}
        timeout:
          connect: ${BROKER_CLIENT_DIRECT_CQL_TIMEOUT_CONNECT_MS:10000}
          socket: ${BROKER_CLIENT_DIRECT_CQL_TIMEOUT_SOCKET_MS:10000}
          connectionRequest: ${BROKER_CLIENT_DIRECT_CQL_TIMEOUT_CONNECTIONREQUEST_MS:10000}
    aktin:
      enabled: ${BROKER_CLIENT_AKTIN_ENABLED:false}
      broker:
        baseUrl: ${AKTIN_BROKER_BASE_URL:}
        apiKey: ${AKTIN_BROKER_API_KEY:}
    dsf:
      enabled: ${BROKER_CLIENT_DSF_ENABLED:false}
      security:
        certificate: ${DSF_SECURITY_CACERT}
        keystore:
          p12file: ${DSF_SECURITY_KEYSTORE_P12FILE}
          password: ${DSF_SECURITY_KEYSTORE_PASSWORD}
      proxy:
        host: ${DSF_PROXY_HOST:}
        username: ${DSF_PROXY_USERNAME:}
        password: ${DSF_PROXY_PASSWORD:}
      webservice:
        baseUrl: ${DSF_WEBSERVICE_BASE_URL}
        readTimeout: 20000
        connectTimeout: 2000
        logRequests: ${DSF_WEBSERVICE_LOG_REQUESTS:false}
      websocket:
        url: ${DSF_WEBSOCKET_URL}
      organizationId: ${DSF_ORGANIZATION_ID}
  flare:
    baseUrl: ${FLARE_WEBSERVICE_BASE_URL:http://localhost:5000}
    readTimeout: 20000
    connectTimeout: 2000
  cql:
    baseUrl: ${CQL_SERVER_BASE_URL:http://localhost:8080/fhir}
  elastic:
    enabled: ${ELASTIC_SEARCH_ENABLED:true}
    host: ${ELASTIC_SEARCH_HOST:localhost:9200}
    filter: ${ELASTIC_SEARCH_FILTER:context,terminology,kds_module}
  privacy:
    threshold:
      sites: ${PRIVACY_THRESHOLD_SITES:3}
      results: ${PRIVACY_THRESHOLD_RESULTS:20}
      sitesResult: ${PRIVACY_THRESHOLD_SITES_RESULT:20}
    quota:
      soft:
        create:
          amount: ${PRIVACY_QUOTA_SOFT_CREATE_AMOUNT:3}
          intervalMinutes: ${PRIVACY_QUOTA_SOFT_CREATE_INTERVALMINUTES:1}
      hard:
        create:
          amount: ${PRIVACY_QUOTA_HARD_CREATE_AMOUNT:50}
          intervalMinutes: ${PRIVACY_QUOTA_HARD_CREATE_INTERVALMINUTES:10080}
      read:
        resultSummary:
          pollingIntervalSeconds: ${PRIVACY_QUOTA_READ_SUMMARY_POLLINGINTERVALSECONDS:10}
        resultDetailedObfuscated:
          pollingIntervalSeconds: ${PRIVACY_QUOTA_READ_DETAILED_OBFUSCATED_POLLINGINTERVALSECONDS:10}
          amount: ${PRIVACY_QUOTA_READ_DETAILED_OBFUSCATED_AMOUNT:3}
          intervalSeconds: ${PRIVACY_QUOTA_READ_DETAILED_OBFUSCATED_INTERVALSECONDS:7200}

logging:
  level:
    org.hibernate: ${LOG_LEVEL_SQL:warn}
    de.numcodex: ${LOG_LEVEL:warn}
    org.springframework.web: ${LOG_LEVEL:warn}

cors:
  allowedOrigins: ${ALLOWED_ORIGINS:http://localhost}


