openapi: 3.0.3
info:
  title: MII Feasibility Backend REST API
  description: todo
  contact:
    email: noreply@todo.de
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.2
externalDocs:
  description: Check out the github repository
  url: https://github.com/medizininformatik-initiative/feasibility-backend
servers:
  - url: https://to.be.defined
    variables:
      basePath:
        default: /api/v3
tags:
  - name: query
    description: operations for queries
    externalDocs:
      description: More information
      url: http://link.to.confluence
  - name: templates
    description: operations to work with query templates
  - name: terminology
    description: operations to work with the ontology
  - name: intrinsics
    description: Offers intrinsic information about this application.
paths:
  /query:
    post:
      tags:
        - query
      summary: Create a query in the broker
      description: The query will be spawned in the broker and directly be dispatched
      operationId: runQuery
      requestBody:
        description: Structured query to create and dispatch
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructuredQuery'
        required: true
      responses:
        201:
          description: Query successfully dispatched
          headers:
            Location:
              description: Path to the result of your newly created query
              schema:
                type: string
                example: "https://to.be.defined/api/v3/query/42"
          content: {}
        401:
          description: Unauthorized - please login first
          content: {}
        403:
          description: Forbidden - insufficient access rights
          content: {}
        422:
          description: Invalid input
          content: {}
        429:
          description: Too many requests in a given amount of time (configurable)
          content: {}
        500:
          description: Dispatch error
          content: {}
      security:
        - feasibility_auth:
            - user
      x-codegen-request-body-name: body
    get:
      tags:
        - query
      summary: Get the list of the calling users queries
      description: This returns a list with basic information about the queries. Id, label (if present) and creation date.
      operationId: getQueryList
      parameters:
        - name: filter
          in: query
          description: filters query
          required: false
          schema:
            type: string
            enum:
              - saved
        - name: skipValidation
          in: query
          description: If true, do not validate the query and do not include a list of invalid terms
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QueryListEntry'
        401:
          description: Unauthorized - please login first
          content: {}
      security:
        - feasibility_auth:
            - user
  /query/validate:
    post:
      tags:
        - query
        - validation
      summary: Validates a submitted (structured) query to check for schema violations or invalid termCodes
      operationId: validateQuery
      requestBody:
        description: Structured query to validate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructuredQuery'
        required: true
      responses:
        200:
          description: Query adheres to json schema. If invalid termCodes are present, they will be in the response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ValidatedStructuredQuery'
        400:
          description: Query does not adhere to json schema
          content: { }
        401:
          description: Unauthorized - please login first
          content: { }
  /query/by-user/{userId}:
    get:
      tags:
        - query
      summary: Finds query summary (id, label, lastModified) of all queries of one user
      operationId: findQueriesByUser
      parameters:
        - name: userId
          in: path
          description: User to filter by (keycloak id)
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: filters query
          required: false
          schema:
            type: string
            enum:
              - saved
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QueryListEntry'
        401:
          description: Unauthorized - please login first
          content: {}
        403:
          description: Forbidden - insufficient access rights
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - feasibility_auth:
            - admin
  /query/{queryId}:
    get:
      tags:
        - query
      summary: Read query by ID
      description: Returns a single query. Contains everything known about the query, including results and structured query
      operationId: getQueryById
      parameters:
        - name: queryId
          in: path
          description: ID of query to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Query'
        401:
          description: Unauthorized - please login first
          content: { }
        403:
          description: Forbidden - insufficient access rights
          content: {}
        404:
          description: Query not found
          content: {}
      security:
        - feasibility_auth:
            - user
            - admin
  /query/{queryId}/content:
    get:
      tags:
        - query
      summary: Read the content (=structured query) of a query by the query id
      description: Returns the structured query of a single query.
      operationId: getQueryContentByQueryId
      parameters:
        - name: queryId
          in: path
          description: ID of query for which the contents shall be returned
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuredQuery'
        401:
          description: Unauthorized - please login first
          content: { }
        403:
          description: Forbidden - insufficient access rights
          content: {}
        404:
          description: Query not found
          content: {}
      security:
        - feasibility_auth:
            - admin
            - user
  /query/{queryId}/summary-result:
    get:
      tags:
        - query
      summary: Read query result summary by query ID
      description: Returns the aggregated results to a query. There is no breakdown by site. So, the resultLines parameter of the response is de facto an array of QueryResultLines, but it will always be empty in this case.
      operationId: getQueryResultSummary
      parameters:
        - name: queryId
          in: path
          description: ID of query for which the results are requested
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResultSummary'
        401:
          description: Unauthorized - please login first
          content: { }
        403:
          description: Forbidden - insufficient access rights
          content: {}
        404:
          description: Query not found
          content: {}
        429:
          description: Too many requests
          content: {}
      security:
        - feasibility_auth:
            - admin
            - user
  /query/{queryId}/detailed-result:
    get:
      tags:
        - query
      summary: Read query result by ID
      description: Returns results to query with the real site names - admin rights required
      operationId: getQueryResultDetailed
      parameters:
        - name: queryId
          in: path
          description: ID of query for which the results are requested
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
        401:
          description: Unauthorized - please login first
          content: { }
        403:
          description: Forbidden - insufficient access rights
          content: {}
        404:
          description: Query not found
          content: {}
      security:
        - feasibility_auth:
            - admin
  /query/{queryId}/detailed-obfuscated-result:
    get:
      tags:
        - query
      summary: Read obfuscated query result by ID
      description: Returns all results to query with the site names obfuscated.
      operationId: getQueryResultDetailedObfuscated
      parameters:
        - name: queryId
          in: path
          description: ID of query for which the results are requested
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResultObfuscated'
        401:
          description: Unauthorized - please login first
          content: { }
        403:
          description: Forbidden - insufficient access rights
          content: {}
        404:
          description: Query not found
          content: {}
        429:
          description: Too many requests
          content: {}
      security:
        - feasibility_auth:
            - admin
            - user
  /query/{queryId}/saved:
    post:
      tags:
        - query
      summary: Store additional information to an executed query
      operationId: saveQuery
      parameters:
        - name: queryId
          in: path
          description: ID of query to which the additional information shall be saved
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The additionally needed information to save a query
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavedQuery'
        required: true
      responses:
        200:
          description: Saved Query successfully stored
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SavedQuerySlots"
        401:
          description: Unauthorized - please login first
          content: {}
        403:
          description: Forbidden - insufficient access rights, or no free slots left
          content:
            application/json:
              schema:
                type: object
                properties:
                  issues:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                        type:
                          type: string
                        code:
                          type: string
                        severity:
                          type: string
        404:
          description: The query for which the additional information should be stored could not be found
          content: {}
        409:
          description: Query has already been saved
          content: {}
      security:
        - feasibility_auth:
            - user
    put:
      tags:
        - query
      summary: "Update a saved query. Only label and comment can be changed"
      operationId: "updateSavedQuery"
      parameters:
        - name: queryId
          in: path
          description: ID of the saved query to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The additionally needed information to update a query
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavedQuery'
        required: true
      responses:
        200:
          description: Saved Query successfully updated
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SavedQuerySlots"
        401:
          description: Unauthorized - please login first
          content: {}
        403:
          description: Forbidden - insufficient access rights
          content: {}
        404:
          description: The query to be updated could not be found
          content: {}
    delete:
      tags:
        - query
      summary: "Remove a saved query from a given query"
      operationId: "deleteSavedQuery"
      parameters:
        - name: "queryId"
          in: "path"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SavedQuerySlots"
        401:
          description: Unauthorized - please login first
          content: { }
        403:
          description: Forbidden - insufficient access rights
          content: {}
        404:
          description: The query for which the additional information should be stored could not be found
          content: {}
  /query/saved-query-slots:
    get:
      tags:
        - query
      summary: "Show how many saved query slots a user already used and how many he has left."
      operationId: "getSavedQuerySlots"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SavedQuerySlots"
      security:
        - feasibility_auth:
            - user
  /query/template:
    post:
      tags:
        - templates
      summary: Store a structured query with additional label and comment
      operationId: storeTemplate
      requestBody:
        description: Query template to persist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryTemplate'
        required: true
      responses:
        201:
          description: Query template successfully stored
          headers:
            Location:
              description: Path to the newly stored query template
              schema:
                type: string
                example: "https://to.be.defined/api/v3/query/template/42"
          content: {}
        401:
          description: Unauthorized - please login first
          content: { }
        403:
          description: Forbidden - insufficient access rights
          content: {}
        409:
          description: Query with the same label exists for this user
          content: {}
      security:
        - feasibility_auth:
            - user
    get:
      tags:
        - templates
      summary: Read list of query templates
      description: Returns the list of all query templates of the current user
      operationId: getQueryTemplateList
      parameters:
        - name: skipValidation
          in: query
          description: If true, do not validate the query and do not include a list of invalid terms
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/QueryTemplateListItem'
        401:
          description: Unauthorized - please login first
          content: { }
      security:
        - feasibility_auth:
            - user
  /query/template/{queryTemplateId}:
    get:
      tags:
        - templates
      summary: Read a query template
      description: Returns the query template with the given id
      operationId: getQueryTemplate
      parameters:
        - name: queryTemplateId
          in: path
          description: ID of the requested query template
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/QueryTemplate'
        401:
          description: Unauthorized - please login first
          content: { }
        404:
          description: Query not found (or user has no access)
          content: { }
      security:
        - feasibility_auth:
            - user
    put:
      tags:
        - templates
      summary: Update a query template
      description: Update the label and comment of a query template
      operationId: updateQueryTemplate
      parameters:
        - name: queryTemplateId
          in: path
          description: ID of the query template to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Query template to persist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryTemplate'
        required: true
      responses:
        200:
          description: OK
          content: {}
        401:
          description: Unauthorized - please login first
          content: { }
        404:
          description: Query not found (or user has no access)
          content: { }
      security:
        - feasibility_auth:
            - user
    delete:
      tags:
        - templates
      summary: Delete a query template
      description: Deletes the query template with the given id
      operationId: deleteQueryTemplate
      parameters:
        - name: queryTemplateId
          in: path
          description: ID of the requested query template
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content: {}
        401:
          description: Unauthorized - please login first
          content: { }
        404:
          description: Query not found (or user has no access)
          content: { }
      security:
        - feasibility_auth:
            - user
  /terminology/categories:
    get:
      tags:
        - terminology
      summary: Get the list of top-level categories for the UI Tree
      description: Get the list of top-level categories for the UI Tree
      operationId: "getCategories"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CategoryEntry"
  /terminology/entries/{nodeId}:
    get:
      tags:
        - terminology
      summary: Get the ui tree information for a node
      operationId: "getEntry"
      parameters:
        - name: "nodeId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TerminologyEntry"
        404:
          description: Node not found
          content: {}
  /terminology/entries:
    get:
      tags:
        - terminology
      summary: "Search for termcodes containing the search string"
      operationId: "search"
      parameters:
        - name: "query"
          in: "query"
          required: true
          schema:
            type: "string"
        - name: "categoryId"
          in: "query"
          required: false
          schema:
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TerminologyEntry"
  /terminology/{contextualizedTermcodeId}/ui_profile:
    get:
      tags:
        - terminology
      summary: "Get a UI profile for a given concept termcode and context termcode"
      operationId: "getUiProfile"
      parameters:
        - name: contextualizedTermcodeId
          in: path
          description: A hashed value (UUID v3), calculated from context and termcode with a predefined namespace
          required: true
          schema:
            type: "string"
          example: 43159902-7171-30cf-ab7e-ee36986c37c6
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
              example:
                name: Prozedur
                time_restriction_allowed: true

        404:
          description: No matching ui profile found
          content: {}
  /terminology/{contextualizedTermcodeId}/mapping:
    get:
      tags:
        - terminology
      summary: "Get the mapping for a given concept termcode and context termcode"
      operationId: "getMapping"
      parameters:
        - name: contextualizedTermcodeId
          in: path
          description: A hashed value (UUID v3), calculated from context and termcode with a predefined namespace
          required: true
          schema:
            type: "string"
          example: 43159902-7171-30cf-ab7e-ee36986c37c6
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
              example:
                name: Age
                resource_type: Patient
                valueSearchParameter: birthdate
                valueType: Age

        404:
          description: No matching mapping found
          content: {}

  /terminology/criteria-set/intersect:
    post:
      tags:
        - terminology
      summary: "Submit a list of termcodes with their contexts and check if they are contained in a criteria set defined by the query parameter"
      operationId: "intersect"
      parameters:
        - name: criteriaSetUrl
          in: query
          description: The Canonical URL of the criteria set to check in
          required: true
          schema:
            type: "string"
          example: http://fhir.de/CriteriaSet/bfarm/icd-10-gm
      requestBody:
        description: A list of ContextTermCodeHashes
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: ["b8318334-7039-33aa-8ed0-85898fffa40b", "a57f98cf-e71d-3695-ae88-59d2c651bf0f", "430654d1-a7df-3c42-a33a-7210ef372bfd"]
      responses:
        200:
          description: Ok, return the filtered list of contextualized termcodes that are in the criteria set provided via query param
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["b8318334-7039-33aa-8ed0-85898fffa40b", "a57f98cf-e71d-3695-ae88-59d2c651bf0f"]
  /actuator/health:
    get:
      summary: Offers health information about this application.
      description: ''
      operationId: ''
      responses:
        200:
          description: Successful health information.
          content:
            application/vnd.spring-boot.actuator.v3+json:
              examples:
                Healthy Application:
                  value: |-
                    {
                        "status": "UP"
                    }
      tags:
        - intrinsics
components:
  schemas:
    QueryListEntry:
      type: object
      required:
        - id
        - label
        - invalidCriteria
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
        comment:
          type: string
        createdAt:
          type: string
          format: 'date-time'
        totalNumberOfPatients:
          type: integer
        invalidCriteria:
          type: array
          items:
            $ref: "#/components/schemas/Criterion"
    Query:
      type: object
      required:
        - id
        - content
      properties:
        id:
          type: integer
          format: int64
        content:
          $ref: "#/components/schemas/StructuredQuery"
        label:
          type: string
        results:
          $ref: "#/components/schemas/QueryResult"
        invalidCriteria:
          type: array
          items:
            $ref: "#/components/schemas/Criterion"
    QueryResultSummary:
      type: object
      properties:
        totalNumberOfPatients:
          type: integer
          format: int64
        queryId:
          type: string
        resultLines:
          type: array
          items:
            $ref: "#/components/schemas/QueryResultLine"
    QueryResultObfuscated:
      type: object
      properties:
        totalNumberOfPatients:
          type: integer
          format: int64
        queryId:
          type: string
        resultLines:
          type: array
          items:
            $ref: "#/components/schemas/QueryResultLineObfuscated"
    QueryResult:
      type: object
      properties:
        totalNumberOfPatients:
          type: integer
          format: int64
        queryId:
          type: string
        resultLines:
          type: array
          items:
            $ref: "#/components/schemas/QueryResultLine"
    QueryResultLine:
      type: object
      required:
        - siteName
        - numberOfPatients
      properties:
        siteName:
          type: string
        numberOfPatients:
          type: integer
          format: int64
    QueryResultLineObfuscated:
      type: object
      required:
        - siteName
        - numberOfPatients
      properties:
        siteName:
          type: string
          description: obfuscated site name
        numberOfPatients:
          type: integer
          format: int64
    QueryTemplateListItem:
      type: object
      required:
        - label
        - invalidCriteria
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
          description: The 'name' of the query. Is assigned by the user via GUI.
          example: my-query-1
        comment:
          type: string
          description: A more detailed information about the query. Is also assigned by the user via GUI.
          example: I wanted to see how many patients I could find for my study XYZ
        lastModified:
          type: string
          format: date-time
        createdBy:
          type: string
          description: Keycloak id of the user who created the query
        invalidCriteria:
          type: array
          items:
            $ref: "#/components/schemas/Criterion"
        isValid:
          type: boolean
          description: is the query valid?
    QueryTemplate:
      type: object
      required:
        - label
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
          description: The 'name' of the query. Is assigned by the user via GUI.
          example: my-query-1
        comment:
          type: string
          description: A more detailed information about the query. Is also assigned by the user via GUI.
          example: I wanted to see how many patients I could find for my study XYZ
        content:
          $ref: "#/components/schemas/StructuredQuery"
        lastModified:
          type: string
          format: date-time
        createdBy:
          type: string
          description: Keycloak id of the user who created the query
        invalidCriteria:
          type: array
          items:
            $ref: "#/components/schemas/Criterion"
    StructuredQuery:
      type: object
      required:
        - version
        - inclusionCriteria
      properties:
        version:
          type: string
          format: uri
          description: The json schema version
          example: http://to_be_decided.com/draft-1/schema#
        display:
          type: string
          example: foobar
        inclusionCriteria:
          type: array
          items:
            $ref: "#/components/schemas/CriterionList"
        exclusionCriteria:
          type: array
          items:
            $ref: "#/components/schemas/CriterionList"
    ValidatedStructuredQuery:
      type: object
      required:
        - query
        - invalidCriteria
      properties:
        query:
          $ref: "#/components/schemas/StructuredQuery"
        invalidCriteria:
          type: array
          items:
            $ref: "#/components/schemas/Criterion"
    SavedQuery:
      type: object
      required:
        - label
      properties:
        label:
          type: string
          description: The 'name' of the query. Is assigned by the user via GUI.
          example: my-query-1
        comment:
          type: string
          description: A more detailed information about the query. Is also assigned by the user via GUI.
          example: I wanted to see how many patients I could find for my study XYZ
        totalNumberOfPatients:
          type: integer
          format: int64
          description: The number of results that were found for this query.
          example: 12345
    SavedQuerySlots:
      type: object
      required:
        - used
        - total
      properties:
        used:
          type: integer
          description: The amount of used saved query slots for a user.
          example: 2
        total:
          type: integer
          description: The total amount of saved query slots per user.
          example: 10
    TermCode:
      description: The termCode defines a concept based on a coding system (i.e. LOINC). The triplet of code, system and version identify the concept.
      type: object
      required:
        - code
        - system
        - display
      properties:
        code:
          type: string
          example: 119373006
        system:
          type: string
          example: http://snomed.info/sct
        version:
          type: string
          example: http://snomed.info/sct/900000000000207008/version/20210731
        display:
          type: string
          example: Amniotic fluid specimen (specimen)
    beforeDate:
      type: string
      format: date-time
    afterDate:
      type: string
      format: date-time
    TimeRestriction:
      anyOf:
        - $ref: "#/components/schemas/beforeDate"
        - $ref: "#/components/schemas/afterDate"
    Unit:
      type: object
      required:
        - code
        - display
      properties:
        code:
          type: string
        display:
          type: string
    AttributeFilter:
      type: object
      description: An AttributeFilter requires different properties, depending on the type. Please refer to the JSON Schema for this.
      required:
        - type
      properties:
        attributeCode:
          $ref: "#/components/schemas/TermCode"
    ValueFilter:
      type: object
      description: A ValueFilter requires different properties, depending on the type. Please refer to the JSON Schema for this.
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - concept
            - quantity-comparator
            - quantity-range
        selectedConcepts:
          type: array
          items:
            $ref: "#/components/schemas/TermCode"
        comparator:
          type: string
          enum:
            - eq
            - ue
            - le
            - lt
            - ge
            - gt
        unit:
          $ref: "#/components/schemas/Unit"
        value:
          type: number
          format: double
        minValue:
          type: number
          format: double
        maxValue:
          type: number
          format: double
    Criterion:
      type: object
      required:
        - termCodes
      properties:
        termCodes:
          type: array
          items:
            $ref: "#/components/schemas/TermCode"
        attributeFilters:
          type: array
          items:
            $ref: "#/components/schemas/AttributeFilter"
        valueFilter:
          $ref: "#/components/schemas/ValueFilter"
        timeRestriction:
          $ref: "#/components/schemas/TimeRestriction"
    CriterionList:
      type: array
      items:
        $ref: "#/components/schemas/Criterion"
    CategoryEntry:
      type: "object"
      required:
        - catId
        - display
      properties:
        catId:
          type: "string"
          format: "uuid"
        display:
          type: "string"
          example: "Diagnose"
    TerminologyEntry:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        context:
          $ref: "#/components/schemas/TermCode"
        termCodes:
          type: "array"
          items:
            $ref: "#/components/schemas/TermCode"
        termCode:
          $ref: "#/components/schemas/TermCode"
        children:
          type: "array"
          items:
            $ref: "#/components/schemas/TerminologyEntry"
        leaf:
          type: "boolean"
        selectable:
          type: "boolean"
        display:
          type: "string"
        root:
          type: "boolean"
    ContextualizedTermCodeList:
      type: object
      properties:
        contextualizedTermCodes:
          type: array
          items:
            $ref: "#/components/schemas/ContextualizedTermCode"
    ContextualizedTermCode:
      type: object
      properties:
        termcode:
          $ref: "#/components/schemas/TermCode"
        context:
          $ref: "#/components/schemas/TermCode"

  securitySchemes:
    feasibility_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://to.be.defined/auth
          scopes:
            user: Feasibility user role
            admin: Feasibility admin role
