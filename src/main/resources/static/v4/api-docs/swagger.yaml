openapi: 3.1.0
info:
  title: Dataportal Backend REST API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 6.0.0
externalDocs:
  description: Check out the github repository
  url: https://github.com/medizininformatik-initiative/feasibility-backend
servers:
  - url: https://to.be.defined
    variables:
      basePath:
        default: /api/v4
tags:
  - name: query
    description: operations for queries
  - name: templates
    description: operations to work with query templates
  - name: terminology
    description: operations to work with the ontology
  - name: codeable concepts
    description: operations on codeable concepts
  - name: dse
    description: Data Selection and Extraction
  - name: intrinsics
    description: Offers intrinsic information about this application.
paths:
  /query:
    post:
      tags:
        - query
      summary: Create a query in the broker
      description: The query will be spawned in the broker and directly be dispatched
      operationId: runQuery
      requestBody:
        description: Structured query to create and dispatch
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StructuredQuery"
        required: true
      responses:
        201:
          description: Query successfully dispatched
          headers:
            Location:
              description: Path to the result of your newly created query
              schema:
                type: string
                examples:
                  - https://to.be.defined/api/v4/query/42
          content: {}
        401:
          description: Unauthorized - please login first
        403:
          description: Forbidden - insufficient access rights
        422:
          description: Invalid input
        429:
          description: Too many requests in a given amount of time (configurable)
        500:
          description: Dispatch error
      security:
        - dataportal_auth:
            - user
      x-codegen-request-body-name: body
    get:
      tags:
        - query
      summary: Get the list of the calling users queries
      description: This returns a list with basic information about the queries. Id, label (if present) and creation date.
      operationId: getQueryList
      parameters:
        - name: filter
          in: query
          description: filters query
          required: false
          schema:
            type: string
            enum:
              - saved
        - name: skip-validation
          in: query
          description: If true, do not validate the query and do not include a list of invalid terms
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QueryListEntry"
        401:
          description: Unauthorized - please login first
      security:
        - dataportal_auth:
            - user
  /query/validate:
    post:
      tags:
        - query
        - validation
      summary: Validates a submitted (structured) query to check for schema violations or invalid termCodes
      operationId: validateQuery
      requestBody:
        description: Structured query to validate
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StructuredQuery"
        required: true
      responses:
        200:
          description: Query adheres to json schema. If invalid termCodes are present, they will be in the response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StructuredQuery"
        400:
          description: Query does not adhere to json schema
        401:
          description: Unauthorized - please login first
  /query/by-user/{userId}:
    get:
      tags:
        - query
      summary: Finds query summary (id, label, lastModified) of all queries of one user
      operationId: findQueriesByUser
      parameters:
        - name: userId
          in: path
          description: User to filter by (keycloak id)
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: filters query
          required: false
          schema:
            type: string
            enum:
              - saved
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QueryListEntry"
        401:
          description: Unauthorized - please login first
        403:
          description: Forbidden - insufficient access rights
        404:
          description: User not found
      security:
        - dataportal_auth:
            - admin
  /query/{queryId}:
    get:
      tags:
        - query
      summary: Read query by ID
      description: Returns a single query. Contains everything known about the query, including results and structured query
      operationId: getQueryById
      parameters:
        - name: queryId
          in: path
          description: ID of query to return
          required: true
          schema:
            type: integer
            format: int64
        - name: skip-validation
          in: query
          description: If true, do not validate the query and do not include a list of invalid terms
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Query"
        401:
          description: Unauthorized - please login first
        403:
          description: Forbidden - insufficient access rights
        404:
          description: Query not found
      security:
        - dataportal_auth:
            - user
            - admin
  /query/{queryId}/content:
    get:
      tags:
        - query
      summary: Read the content (=structured query) of a query by the query id
      description: Returns the structured query of a single query.
      operationId: getQueryContentByQueryId
      parameters:
        - name: queryId
          in: path
          description: ID of query for which the contents shall be returned
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StructuredQuery"
        401:
          description: Unauthorized - please login first
        403:
          description: Forbidden - insufficient access rights
        404:
          description: Query not found
      security:
        - dataportal_auth:
            - admin
            - user
  /query/{queryId}/summary-result:
    get:
      tags:
        - query
      summary: Read query result summary by query ID
      description: Returns the aggregated results to a query. There is no breakdown by site. So, the resultLines parameter of the response is de facto an array of QueryResultLines, but it will always be empty in this case.
      operationId: getQueryResultSummary
      parameters:
        - name: queryId
          in: path
          description: ID of query for which the results are requested
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResultSummary"
        401:
          description: Unauthorized - please login first
        403:
          description: Forbidden - insufficient access rights
        404:
          description: Query not found
        429:
          description: Too many requests
      security:
        - dataportal_auth:
            - admin
            - user
  /query/{queryId}/detailed-result:
    get:
      tags:
        - query
      summary: Read query result by ID
      description: Returns results to query with the real site names - admin rights required
      operationId: getQueryResultDetailed
      parameters:
        - name: queryId
          in: path
          description: ID of query for which the results are requested
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult"
        401:
          description: Unauthorized - please login first
        403:
          description: Forbidden - insufficient access rights
        404:
          description: Query not found
      security:
        - dataportal_auth:
            - admin
  /query/{queryId}/detailed-obfuscated-result:
    get:
      tags:
        - query
      summary: Read obfuscated query result by ID
      description: Returns all results to query with the site names obfuscated.
      operationId: getQueryResultDetailedObfuscated
      parameters:
        - name: queryId
          in: path
          description: ID of query for which the results are requested
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResultObfuscated"
        401:
          description: Unauthorized - please login first
        403:
          description: Forbidden - insufficient access rights
        404:
          description: Query not found
        429:
          description: Too many requests
      security:
        - dataportal_auth:
            - admin
            - user
  /query/detailed-obfuscated-result-rate-limit:
    get:
      summary: get the rate limit for detailed obfuscated results
      operationId: getDetailedObfuscatedResultRateLimit
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResultRateLimit"
  /query/{queryId}/saved:
    post:
      tags:
        - query
      summary: Store additional information to an executed query
      operationId: saveQuery
      parameters:
        - name: queryId
          in: path
          description: ID of query to which the additional information shall be saved
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The additionally needed information to save a query
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SavedQuery"
        required: true
      responses:
        200:
          description: Saved Query successfully stored
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SavedQuerySlots"
        401:
          description: Unauthorized - please login first
        403:
          description: Forbidden - insufficient access rights, or no free slots left
          content:
            application/json:
              schema:
                type: object
                properties:
                  issues:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                        type:
                          type: string
                        code:
                          type: string
                        severity:
                          type: string
        404:
          description: The query for which the additional information should be stored could not be found
        409:
          description: Query has already been saved
      security:
        - dataportal_auth:
            - user
    put:
      tags:
        - query
      summary: Update a saved query. Only label and comment can be changed.
      operationId: updateSavedQuery
      parameters:
        - name: queryId
          in: path
          description: ID of the saved query to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The additionally needed information to update a query
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SavedQuery"
        required: true
      responses:
        200:
          description: Saved Query successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SavedQuerySlots"
        401:
          description: Unauthorized - please login first
        403:
          description: Forbidden - insufficient access rights
        404:
          description: The query to be updated could not be found
    delete:
      tags:
        - query
      summary: Remove a saved query from a given query
      operationId: deleteSavedQuery
      parameters:
        - name: queryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SavedQuerySlots"
        401:
          description: Unauthorized - please login first
        403:
          description: Forbidden - insufficient access rights
        404:
          description: The query for which the additional information should be stored could not be found
  /query/saved-query-slots:
    get:
      tags:
        - query
      summary: Show how many saved query slots a user already used and how many he has left.
      operationId: getSavedQuerySlots
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SavedQuerySlots"
      security:
        - dataportal_auth:
            - user
  /query/template:
    post:
      tags:
        - templates
      summary: Store a structured query with additional label and comment
      operationId: storeTemplate
      requestBody:
        description: Query template to persist
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryTemplate"
        required: true
      responses:
        201:
          description: Query template successfully stored
          headers:
            Location:
              description: Path to the newly stored query template
              schema:
                type: string
                format: uri
                examples:
                  - https://to.be.defined/api/v4/query/template/42
        401:
          description: Unauthorized - please login first
        403:
          description: Forbidden - insufficient access rights
        409:
          description: Query with the same label exists for this user
      security:
        - dataportal_auth:
            - user
    get:
      tags:
        - templates
      summary: Read list of query templates
      description: Returns the list of all query templates of the current user
      operationId: getQueryTemplateList
      parameters:
        - name: skip-validation
          in: query
          description: If true, do not validate the query and do not include a list of invalid terms
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/QueryTemplateListItem"
        401:
          description: Unauthorized - please login first
      security:
        - dataportal_auth:
            - user
  /query/template/{queryTemplateId}:
    get:
      tags:
        - templates
      summary: Read a query template
      description: Returns the query template with the given id
      operationId: getQueryTemplate
      parameters:
        - name: queryTemplateId
          in: path
          description: ID of the requested query template
          required: true
          schema:
            type: integer
            format: int64
        - name: skip-validation
          in: query
          description: If true, do not validate the query and do not include a list of invalid terms
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/QueryTemplate"
        401:
          description: Unauthorized - please login first
        404:
          description: Query not found (or user has no access)
      security:
        - dataportal_auth:
            - user
    put:
      tags:
        - templates
      summary: Update a query template
      description: Update the label and comment of a query template
      operationId: updateQueryTemplate
      parameters:
        - name: queryTemplateId
          in: path
          description: ID of the query template to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Query template to persist
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryTemplate"
        required: true
      responses:
        200:
          description: OK
        401:
          description: Unauthorized - please login first
        404:
          description: Query not found (or user has no access)
      security:
        - dataportal_auth:
            - user
    delete:
      tags:
        - templates
      summary: Delete a query template
      description: Deletes the query template with the given id
      operationId: deleteQueryTemplate
      parameters:
        - name: queryTemplateId
          in: path
          description: ID of the requested query template
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
        401:
          description: Unauthorized - please login first
        404:
          description: Query not found (or user has no access)
      security:
        - dataportal_auth:
            - user
  /terminology/search/filter:
    get:
      tags:
        - terminology
      summary: Get the list of available filters
      operationId: getFilters
      responses:
        200:
          description: Ok, return the list of available filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Filter"
  /terminology/systems:
    get:
      tags:
        - terminology
      summary: Get the mapping of system urls to display names
      operationId: getTerminologySystems
      responses:
        200:
          description: System mapping file found and readable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TerminologySystems"
  /terminology/entry/search:
    get:
      tags:
        - terminology
      summary: Parametrized search in the configured elastic search service.
      operationId: searchEntry
      parameters:
        - name: searchterm
          in: query
          description: The term to search for. In case of an empty searchterm, return the first page of the whole index, sorted alphabetically
          schema:
            type: string
          example: Diabetes Mellitus
        - name: contexts
          in: query
          description: Limit the search to any of the given contexts
          schema:
            type: array
            items:
              type: string
              example: Diagnosis
          style: form
          explode: false
        - name: terminologies
          in: query
          description: Limit the search to a any of the given terminologies
          schema:
            type: array
            items:
              type: string
              example: ICD10
          style: form
          explode: false
        - name: kds-modules
          in: query
          description: Limit the search to any of the given KDS modules
          schema:
            type: array
            items:
              type: string
              example: Condition
          style: form
          explode: false
        - name: criteria-sets
          in: query
          description: Limit the search to certain criteria sets (specified via url)
          schema:
            type: array
            items:
              type: string
              example: http://fhir.de/CodeSystem/bfarm/icd-10-gm
          style: form
          explode: false
        - name: availability
          in: query
          description: Limit the search to available items? (Maybe better invert this one to make this the default?)
          schema:
            type: boolean
          example: true
        - name: page-size
          in: query
          description: How many results shall be returned per page
          schema:
            type: integer
          example: 10
        - name: page
          in: query
          description: Which page shall be returned
          schema:
            type: integer
          example: 42
      responses:
        200:
          description: Ok, return the list of results for the search
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElasticSearchResult"
  /terminology/entry/{id}/relations:
    get:
      tags:
        - terminology
      summary: Get the detailed entry for a criterion, containing children and translations
      operationId: getEntryById
      parameters:
        - name: id
          in: path
          description: The id (contextualized termcode hash) of the entry that shall be retrieved
          required: true
          schema:
            type: string
            example: 203e04cd-4f0a-321b-b1ad-9ec6d211e0a8
      responses:
        200:
          description: Entry found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElasticSearchResultEntryWithRelations"
        401:
          description: Unauthorized - please login first
        403:
          description: Forbidden - insufficient access rights
        404:
          description: Entry not found
  /terminology/entry/{id}:
    get:
      tags:
        - terminology
      summary: Get the detailed entry for a criterion, containing children and translations
      description: This should be in the getEntryById call, but for better distinction between the return values it is listed seperately here
      operationId: getEntriesById
      parameters:
        - name: id
          in: path
          description: The ids (contextualized termcode hash) of the entries that shall be retrieved
          required: true
          schema:
            type: string
            example: 203e04cd-4f0a-321b-b1ad-9ec6d211e0a8
      responses:
        200:
          description: Entry found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElasticSearchResultEntry"
        401:
          description: Unauthorized - please login first
        403:
          description: Forbidden - insufficient access rights
        404:
          description: Entry not found
  /terminology/criteria-profile-data:
    get:
      tags:
        - terminology
      summary: Get the profile data for criteria, containing uiProfile context and termCodes
      description: This should return all the information needed to build criteria in the frontend.
      operationId: getEntriesByIdsWithDetail
      parameters:
        - name: ids
          in: query
          style: form
          explode: false
          description: A comma-separated list of IDs (contextualized termcode hashes) of the entries that shall be retrieved.
          required: true
          schema:
            type: string
            example: 203e04cd-4f0a-321b-b1ad-9ec6d211e0a8,203e04cd-4f0a-321b-b1ad-9ec6d211e0a9
      responses:
        200:
          description: Entries found. May contain empty entries if some were not found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CriteriaProfileData"
        401:
          description: Unauthorized - please login first.
        403:
          description: Forbidden - insufficient access rights.
  /codeable-concept/entry/search:
    get:
      tags:
        - codeable concepts
      summary: Search for codeable concepts by code or display. Optionally filter by value sets
      operationId: searchCodeableConcepts
      parameters:
        - name: searchterm
          in: query
          description: The term to search for. In case of an empty searchterm, return the first page of the whole index, sorted alphabetically
          schema:
            type: string
          example: Diabetes Mellitus
        - name: value-sets
          in: query
          description: Limit the search to certain value sets (specified via url)
          schema:
            type: array
            items:
              type: string
              example: http://fhir.de/CodeSystem/bfarm/icd-10-gm
          style: form
          explode: false
        - name: page-size
          in: query
          description: How many results shall be returned per page
          schema:
            type: integer
          example: 10
        - name: page
          in: query
          description: Which page shall be returned
          schema:
            type: integer
          example: 42
      responses:
        200:
          description: Ok, return the page of results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeableConceptSearchResult"
        401:
          description: Unauthorized - please login first
        403:
          description: Forbidden - insufficient access rights
  /codeable-concept/entry/{id}:
    get:
      tags:
        - codeable concepts
      summary: Search for codeable concepts by code or display. Optionally filter by value sets
      operationId: getCodeableConceptByCode
      parameters:
        - name: id
          in: path
          description: The id (contextualized termcode hash) of the entry that shall be retrieved
          required: true
          schema:
            type: string
            example: 203e04cd-4f0a-321b-b1ad-9ec6d211e0a8
      responses:
        200:
          description: Ok, return the codeable concept
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TermCode"
        401:
          description: Unauthorized - please login first
        403:
          description: Forbidden - insufficient access rights
        404:
          description: Entry not found
  /dse/profile-tree:
    get:
      tags:
        - dse
      summary: Get the complete DSE profile tree
      description: This can not be filtered or paginated or anything since for now it is rather small. All filtering will be done in the frontend for now. Might change if problems with that approach occur.
      operationId: getProfileTree
      responses:
        200:
          description: Profile tree file found and readable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileTreeNode"
  /dse/profile-data:
    get:
      tags:
        - dse
      summary: Get the profile data for the submitted ids
      description: Get profile data for all submitted ids. If a profile is not found, an error message will be supplied.
      operationId: getProfileData
      responses:
        200:
          description: Success, returning profiles - may contain profiles with error messages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileDataList"
  /actuator/health:
    get:
      summary: Offers health information about this application.
      description: ''
      operationId: ''
      responses:
        200:
          description: Successful health information.
          content:
            application/vnd.spring-boot.actuator.v3+json:
              examples:
                Healthy Application:
                  value: |-
                    {
                        "status": "UP"
                    }
      tags:
        - intrinsics
components:
  schemas:
    QueryListEntry:
      type: object
      required:
        - id
        - label
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
        comment:
          type: string
        createdAt:
          type: string
          format: date-time
        totalNumberOfPatients:
          type: integer
        isValid:
          type: boolean
    Query:
      type: object
      required:
        - id
        - content
      properties:
        id:
          type: integer
          format: int64
        content:
          $ref: "#/components/schemas/StructuredQuery"
        label:
          type: string
        results:
          $ref: "#/components/schemas/QueryResult"
    QueryResultSummary:
      type: object
      properties:
        totalNumberOfPatients:
          type: integer
          format: int64
        queryId:
          type: string
        resultLines:
          type: array
          items:
            $ref: "#/components/schemas/QueryResultLine"
    QueryResultObfuscated:
      type: object
      properties:
        totalNumberOfPatients:
          type: integer
          format: int64
        queryId:
          type: string
        resultLines:
          type: array
          items:
            $ref: "#/components/schemas/QueryResultLineObfuscated"
    QueryResult:
      type: object
      properties:
        totalNumberOfPatients:
          type: integer
          format: int64
        queryId:
          type: string
        resultLines:
          type: array
          items:
            $ref: "#/components/schemas/QueryResultLine"
    QueryResultLine:
      type: object
      required:
        - siteName
        - numberOfPatients
      properties:
        siteName:
          type: string
        numberOfPatients:
          type: integer
          format: int64
    QueryResultLineObfuscated:
      type: object
      required:
        - siteName
        - numberOfPatients
      properties:
        siteName:
          type: string
          description: obfuscated site name
        numberOfPatients:
          type: integer
          format: int64
    QueryResultRateLimit:
      type: object
      properties:
        limit:
          type: number
          format: int64
        remaining:
          type: number
          format: int64
    QueryTemplateListItem:
      type: object
      required:
        - label
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
          description: The 'name' of the query. Is assigned by the user via GUI.
          examples:
            - my-query-1
        comment:
          type: string
          description: A more detailed information about the query. Is also assigned by the user via GUI.
          examples:
            - I wanted to see how many patients I could find for my study XYZ
        lastModified:
          type: string
          format: date-time
        createdBy:
          type: string
          description: Keycloak id of the user who created the query
        isValid:
          type: boolean
          description: is the query valid?
    QueryTemplate:
      type: object
      required:
        - label
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
          description: The 'name' of the query. Is assigned by the user via GUI.
          examples:
            - my-query-1
        comment:
          type: string
          description: A more detailed information about the query. Is also assigned by the user via GUI.
          examples:
            - I wanted to see how many patients I could find for my study XYZ
        content:
          $ref: "#/components/schemas/StructuredQuery"
        lastModified:
          type: string
          format: date-time
        createdBy:
          type: string
          description: Keycloak id of the user who created the query
    StructuredQuery:
      type: object
      required:
        - version
        - inclusionCriteria
      properties:
        version:
          type: string
          format: uri
          description: The json schema version
          examples:
            - http://to_be_decided.com/draft-1/schema#
        display:
          type: string
          examples:
            - foobar
        inclusionCriteria:
          type: array
          items:
            $ref: "#/components/schemas/CriterionList"
        exclusionCriteria:
          type: array
          items:
            $ref: "#/components/schemas/CriterionList"
    SavedQuery:
      type: object
      required:
        - label
      properties:
        label:
          type: string
          description: The 'name' of the query. Is assigned by the user via GUI.
          examples:
            - my-query-1
        comment:
          type: string
          description: A more detailed information about the query. Is also assigned by the user via GUI.
          examples:
            - I wanted to see how many patients I could find for my study XYZ
        totalNumberOfPatients:
          type: integer
          format: int64
          description: The number of results that were found for this query.
          examples:
            - 12345
    SavedQuerySlots:
      type: object
      required:
        - used
        - total
      properties:
        used:
          type: integer
          description: The amount of used saved query slots for a user.
          examples:
            - 2
        total:
          type: integer
          description: The total amount of saved query slots per user.
          examples:
            - 10
    TermCode:
      description: The termCode defines a concept based on a coding system (i.e. LOINC). The triplet of code, system and version identify the concept.
      type: object
      required:
        - code
        - system
        - display
      properties:
        code:
          type: string
          examples:
            - 119373006
        system:
          type: string
          examples:
            - http://snomed.info/sct
        version:
          type: string
          examples:
            - http://snomed.info/sct/900000000000207008/version/20210731
        display:
          type: string
          examples:
            - Amniotic fluid specimen (specimen)
    beforeDate:
      type: string
      format: date-time
    afterDate:
      type: string
      format: date-time
    TimeRestriction:
      anyOf:
        - $ref: "#/components/schemas/beforeDate"
        - $ref: "#/components/schemas/afterDate"
    Unit:
      type: object
      required:
        - code
        - display
      properties:
        code:
          type: string
        display:
          type: string
    AttributeFilter:
      type: object
      description: An AttributeFilter requires different properties, depending on the type. Please refer to the JSON Schema for this.
      required:
        - type
      properties:
        attributeCode:
          $ref: "#/components/schemas/TermCode"
    ValueFilter:
      type: object
      description: A ValueFilter requires different properties, depending on the type. Please refer to the JSON Schema for this.
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - concept
            - quantity-comparator
            - quantity-range
        selectedConcepts:
          type: array
          items:
            $ref: "#/components/schemas/TermCode"
        comparator:
          type: string
          enum:
            - eq
            - ue
            - le
            - lt
            - ge
            - gt
        unit:
          $ref: "#/components/schemas/Unit"
        value:
          type: number
          format: double
        minValue:
          type: number
          format: double
        maxValue:
          type: number
          format: double
    Criterion:
      type: object
      required:
        - termCodes
      properties:
        termCodes:
          type: array
          items:
            $ref: "#/components/schemas/TermCode"
        attributeFilters:
          type: array
          items:
            $ref: "#/components/schemas/AttributeFilter"
        valueFilter:
          $ref: "#/components/schemas/ValueFilter"
        timeRestriction:
          $ref: "#/components/schemas/TimeRestriction"
        issues:
          type: array
          items:
            $ref: "#/components/schemas/ValidationIssue"
    CriterionList:
      type: array
      items:
        $ref: "#/components/schemas/Criterion"
    ContextualizedTermCodeList:
      type: object
      properties:
        contextualizedTermCodes:
          type: array
          items:
            $ref: "#/components/schemas/ContextualizedTermCode"
    ContextualizedTermCode:
      type: object
      properties:
        termcode:
          $ref: "#/components/schemas/TermCode"
        context:
          $ref: "#/components/schemas/TermCode"
    ValidationIssue:
      type: object
      required:
        - code
        - detail
      properties:
        code:
          type: string
          examples:
            - VAL-20001
        detail:
          type: string
          examples:
            - The combination of context and termcode(s) is not found.
    ElasticSearchResult:
      type: object
      properties:
        totalHits:
          type: integer
          examples:
            - 42
        results:
          type: array
          items:
            $ref: "#/components/schemas/ElasticSearchResultEntry"
    ElasticSearchResultEntryWithRelations:
      type: object
      properties:
        name:
          type: string
          examples:
            - Diabetes Mellitus
        contextualizedTermcodeHash:
          type: string
          format: uuid
          examples:
            - 203e04cd-4f0a-321b-b1ad-9ec6d211e0a8
        availability:
          description: Not sure if we want this as numeric value, percentage or just boolean?
          type: integer
          minimum: 0
          maximum: 100
          examples:
            - 94
        context:
          type: string
          examples:
            - Diagnosis
        terminology:
          type: string
          examples:
            - icd-10
        termcode:
          type: string
          examples:
            - E10-E14
        kdsModule:
          type: string
          examples:
            - Condition
        translations:
          type: array
          items:
            $ref: "#/components/schemas/ElasticSearchTranslationEntry"
        parents:
          type: array
          items:
            $ref: "#/components/schemas/ElasticSearchRelationEntry"
        children:
          type: array
          items:
            $ref: "#/components/schemas/ElasticSearchRelationEntry"
    ElasticSearchResultEntry:
      type: object
      properties:
        name:
          type: string
          examples:
            - Diabetes Mellitus
        contextualizedTermcodeHash:
          type: string
          format: uuid
          examples:
            - 203e04cd-4f0a-321b-b1ad-9ec6d211e0a8
        availability:
          description: Not sure if we want this as numeric value, percentage or just boolean?
          type: integer
          minimum: 0
          examples:
            - 119578
        context:
          type: string
          examples:
            - Diagnosis
        terminology:
          type: string
          examples:
            - icd-10
        termcode:
          type: string
          examples:
            - E10-E14
        kdsModule:
          type: string
          examples:
            - Condition
    ElasticSearchTranslationEntry:
      type: object
      properties:
        lang:
          type: string
          examples:
            - en
        value:
          type: string
          examples:
            - Diabetes Mellitus
    ElasticSearchRelationEntry:
      type: object
      properties:
        name:
          type: string
          examples:
            - Endokrine, Ernährungs- und Stoffwechselerkrankungen
        contextualizedTermcodeHash:
          type: string
          examples:
            - c55d0d62-6c47-30b0-94b2-afa383ce35f7
    Filter:
      type: object
      properties:
        name:
          type: string
          examples:
            - Terminology
        values:
          type: array
          items:
            $ref: "#/components/schemas/FilterValue"
          examples:
            - ICD10
            - SNOMED
            - LOINC
    FilterValue:
      type: string
      examples:
        - icd10
    CodeableConceptSearchResult:
      type: object
      properties:
        totalHits:
          type: integer
          examples:
            - 42
        results:
          type: array
          items:
            $ref: "#/components/schemas/TermCode"
    CriteriaProfileData:
      type: object
      properties:
        id:
          type: string
          format: uuid
        uiprofile:
          type: array
          items:
            $ref: "#/components/schemas/UiProfileEntry"
        termCodes:
          type: array
          items:
            $ref: "#/components/schemas/TermCode"
        context:
          $ref: "#/components/schemas/TermCode"
    UiProfileEntry:
      type: object
      properties:
        attributeDefinitions:
          type: array
          items:
            $ref: "#/components/schemas/AttributeDefinition"
        name:
          type: string
          examples:
            - Diagnose
        timeRestrictionAllowed:
          type: boolean
          examples:
            - false
        valueDefinition:
          type: string
    AttributeDefinition:
      type: object
      properties:
        allowedUnits:
          type: array
          items:
            $ref: "#/components/schemas/Unit"
        attributeCode:
          $ref: "#/components/schemas/TermCode"
        max:
          type: number
          examples:
            - null
        min:
          type: number
          examples:
            - null
        optional:
          type: boolean
          examples:
            - true
        precision:
          type: number
          examples:
            - 1
        referencedCriteriaSet:
          type: string
          examples:
            - http://fdpg.mii.cds/CriteriaSet/Diagnose/icd-10-gm
        referencedValueSet:
          type: string
          examples:
            - http://hl7.org/fhir/sid/icd-o-3
        type:
          type: string
          examples:
            - reference
    TerminologySystems:
      type: object
      required:
        - url
        - name
      properties:
        url:
          type: string
          format: uri
          examples:
            - http://fhir.de/CodeSystem/bfarm/ops
        name:
          type: string
          examples:
            - OPS
    ProfileTreeNode:
      type: object
      properties:
        id:
          type: string
          format: uuid
          examples:
            - aee6afe1-3b96-4449-85cd-be8046ccbb84
        children:
          type: array
          items:
            $ref: "#/components/schemas/ProfileTreeNode"
        name:
          type: string
          examples:
            - ProfileObservationLaboruntersuchung
        display:
          type: string
          examples:
            - Profile - Observation - Laboruntersuchung
        module:
          type: string
          examples:
            - modul-labor
        url:
          type: string
          format: uri
          examples:
            - https://www.medizininformatik-initiative.de/fhir/core/modul-labor/StructureDefinition/ObservationLab
        leaf:
          type: boolean
          examples:
            - true
        selectable:
          type: boolean
          examples:
            - false
    ProfileDataField:
      type: object
      properties:
        id:
          type: string
          examples:
            - Observation.value[x]:valueQuantity.id
        display:
          type: string
          examples:
            - Unique id for inter-element referencing
        name:
          type: string
          examples:
            - id
        children:
          type: array
          items:
            $ref: "#/components/schemas/ProfileDataField"
    ProfileDataFilter:
      type: object
      properties:
        type:
          type: string
          examples:
            - token
        name:
          type: string
          examples:
            - code
        ui_type:
          type: string
          examples:
            - code
        referencedCriteriaSet:
          type: string
          format: uri
          examples:
            - http://fdpg.mii.cds/CriteriaSet/Diagnose/icd-10-gm
    ProfileDataEntry:
      type: object
      properties:
        url:
          type: string
          format: uri
          examples:
            - https://www.medizininformatik-initiative.de/fhir/core/modul-labor/StructureDefinition/ObservationLab
        display:
          type: string
          examples:
            - Profile - Observation - Laboruntersuchung
        fields:
          type: array
          items:
            $ref: "#/components/schemas/ProfileDataField"
        filters:
          type: array
          items:
            $ref: "#/components/schemas/ProfileDataFilter"
        errorCode:
          type: string
          examples:
            - TBD-000
        errorCause:
          type: string
          examples:
            - Profile entry not found
    ProfileDataList:
      type: array
      items:
        $ref: "#/components/schemas/ProfileDataEntry"
  securitySchemes:
    dataportal_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://to.be.defined/auth
          scopes:
            user: Dataportal user role
            admin: Dataportal admin role
