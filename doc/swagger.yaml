openapi: 3.0.3
info:
  title: MII Feasibility Backend REST API
  description: todo
  contact:
    email: noreply@todo.de
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.2
externalDocs:
  description: Check out the github repository
  url: https://github.com/medizininformatik-initiative/feasibility-backend
servers:
  - url: https://to.be.defined
    variables:
      basePath:
        default: /api/v1/query-handler
tags:
  - name: query
    description: operations for queries
    externalDocs:
      description: More information
      url: http://link.to.confluence
  - name: templates
    description: operations to work with query templates
  - name: intrinsics
    description: Offers intrinsic information about this application.
  - name: draft
    description: These endpoints are not yet implemented and are subject to discussion
paths:
  /run-query:
    post:
      tags:
        - query
      summary: Create a query in the broker
      description: The query will be spawned in the broker and directly be dispatched
      operationId: runQuery
      requestBody:
        description: Structured query to create and dispatch
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructuredQuery'
        required: true
      responses:
        201:
          description: Query successfully dispatched
          headers:
            Location:
              description: Path to the result of your newly created query
              schema:
                type: string
                example: "https://to.be.defined/api/v1/query-handler/result/42"
          content: {}
        401:
          description: Unauthorized - please login first
          content: {}
        403:
          description: Forbidden - insufficient access rights
          content: {}
        422:
          description: Invalid input
          content: {}
        500:
          description: Dispatch error
          content: {}
      security:
        - feasibility_auth:
            - write:query
      x-codegen-request-body-name: body
  /query/by-user/{userId}:
    get:
      tags:
        - draft
      summary: Finds query summary (id, label, lastModified) of all queries of one user
      description: User identification is done via auth id
      operationId: findQueriesByUser
      parameters:
        - name: userId
          in: path
          description: User to filter by
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuerySimple'
        401:
          description: Unauthorized - please login first
          content: {}
        403:
          description: Forbidden - insufficient access rights
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - fdpg_auth:
            - read:all
  /query/{queryId}:
    get:
      tags:
        - draft
      summary: Read query by ID
      description: Returns a single query. Contains everything known about the query, including results and structured query
      operationId: getQueryById
      parameters:
        - name: queryId
          in: path
          description: ID of query to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Query'
        401:
          description: Unauthorized - please login first
          content: { }
        403:
          description: Forbidden - insufficient access rights
          content: {}
        404:
          description: Query not found
          content: {}
      security:
        - feasibility_auth:
            - read:query
  /query/{queryId}/content:
    get:
      tags:
        - draft
      summary: Read structured query of a query by the query id
      description: Returns the structured query of a single query.
      operationId: getQueryContentByQueryId
      parameters:
        - name: queryId
          in: path
          description: ID of query for which the contents shall be returned
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuredQuery'
        401:
          description: Unauthorized - please login first
          content: { }
        403:
          description: Forbidden - insufficient access rights
          content: {}
        404:
          description: Query not found
          content: {}
      security:
        - feasibility_auth:
            - read:query
  /query/result/{queryId}:
    get:
      tags:
        - query
      summary: Read query result by ID
      description: Returns either your own result for this query
        (if you are authorized by your token) or all results if you got admin rights.
        The query results might also be an aggregated one. This is not decided yet.
      operationId: getQueryResultsByQueryId
      parameters:
        - name: queryId
          in: path
          description: ID of query for which the results are requested
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
        401:
          description: Unauthorized - please login first
          content: { }
        403:
          description: Forbidden - insufficient access rights
          content: {}
        404:
          description: Query not found
          content: {}
      security:
        - feasibility_auth:
            - read:result
            - read:all
  /query/{queryId}/result:
    get:
      tags:
        - draft
      summary: Read query result by ID
      description: Returns either your own result for this query
        (if you are authorized by your token) or all results if you got admin rights.
        The query results might also be an aggregated one. This is not decided yet.
      operationId: getQueryResultsByQueryId2
      parameters:
        - name: queryId
          in: path
          description: ID of query for which the results are requested
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
        401:
          description: Unauthorized - please login first
          content: { }
        403:
          description: Forbidden - insufficient access rights
          content: {}
        404:
          description: Query not found
          content: {}
      security:
        - feasibility_auth:
            - read:result
            - read:all
  /stored-query:
    post:
      tags:
        - templates
      summary: Store a structured query with additional label and comment
      operationId: storeQuery
      requestBody:
        description: Stored query to persist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoredQuery'
        required: true
      responses:
        201:
          description: Query successfully stored
          headers:
            Location:
              description: Path to the newly stored query
              schema:
                type: string
                example: "https://to.be.defined/api/v1/query-handler/stored-query/42"
          content: {}
        401:
          description: Unauthorized - please login first
          content: { }
        403:
          description: Forbidden - insufficient access rights
          content: {}
        409:
          description: Query with the same label exists for this user
          content: {}
      security:
        - feasibility_auth:
            - write:query
    get:
      tags:
        - templates
      summary: Read list of stored queries
      description: Returns the list of all queries of the current user
      operationId: getStoredQueryList
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/StoredQuery'
        401:
          description: Unauthorized - please login first
          content: { }
      security:
        - feasibility_auth:
            - read:query
  /stored-query/{queryId}:
    get:
      tags:
        - templates
      summary: Read a stored query
      description: Returns he stored query with the given id
      operationId: getStoredQuery
      parameters:
        - name: queryId
          in: path
          description: ID of the requested stored query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/StoredQuery'
        401:
          description: Unauthorized - please login first
          content: { }
        404:
          description: Query not found (or user has no access)
          content: { }
      security:
        - feasibility_auth:
            - read:query
  /stored-query/validate:
    get:
      tags:
        - templates
      summary: Check all own queries for invalid or outdated termcodes
      description: Returns a list of stored queries with the additional info if a query is valid
      operationId: validateStoredQueryList
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/StoredQuery'
        401:
          description: Unauthorized - please login first
          content: { }
      security:
        - feasibility_auth:
            - read:query
  /actuator/health:
    get:
      summary: Offers health information about this application.
      description: ''
      operationId: ''
      responses:
        200:
          description: Successful health information.
          content:
            application/vnd.spring-boot.actuator.v3+json:
              examples:
                Healthy Application:
                  value: |-
                    {
                        "status": "UP"
                    }
      tags:
        - intrinsics
components:
  schemas:
    QuerySimple:
      type: object
      required:
        - id
        - label
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
        last_modified:
          type: string
          format: 'date-time'
    Query:
      type: object
      required:
        - id
        - content
      properties:
        id:
          type: integer
          format: int64
        content:
          $ref: "#/components/schemas/StructuredQuery"
        label:
          type: string
        results:
          $ref: "#/components/schemas/QueryResult"
    QueryResult:
      type: object
      properties:
        totalNumberOfPatients:
          type: integer
          format: int64
        queryId:
          type: string
        resultLines:
          type: array
          items:
            $ref: "#/components/schemas/QueryResultLine"
    QueryResultLine:
      type: object
      required:
        - siteName
        - numberOfPatients
      properties:
        siteName:
          type: string
        numberOfPatients:
          type: integer
          format: int64
    StoredQuery:
      type: object
      required:
        - label
        - structuredQuery
      properties:
        label:
          type: string
          description: The 'name' of the query. Is assigned by the user via GUI.
          example: my-query-1
        comment:
          type: string
          description: A more detailed information about the query. Is also assigned by the user via GUI.
          example: I wanted to see how many patients I could find for my study XYZ
        structuredQuery:
          $ref: "#/components/schemas/StructuredQuery"
        lastModified:
          type: string
          format: date-time
        createdBy:
          type: string
          description: Keycloak id of the user who created the query
        invalidTerms:
          type: array
          items:
            $ref: "#/components/schemas/TermCode"
    StructuredQuery:
      type: object
      required:
        - version
        - inclusionCriteria
      properties:
        version:
          type: string
          description: The json schema version
          example: http://to_be_decided.com/draft-1/schema#
        display:
          type: string
          example: foobar
        inclusionCriteria:
          type: array
          items:
            $ref: "#/components/schemas/CriterionList"
        exclusionCriteria:
          type: array
          items:
            $ref: "#/components/schemas/CriterionList"
    TermCode:
      description: The termCode defines a concept based on a coding system (i.e. LOINC). The triplet of code, system and version identify the concept.
      type: object
      required:
        - code
        - system
        - display
      properties:
        code:
          type: string
          example: 119373006
        system:
          type: string
          example: http://snomed.info/sct
        version:
          type: string
          example: http://snomed.info/sct/900000000000207008/version/20210731
        display:
          type: string
          example: Amniotic fluid specimen (specimen)
    beforeDate:
      type: string
      format: date-time
    afterDate:
      type: string
      format: date-time
    TimeRestriction:
      anyOf:
        - $ref: "#/components/schemas/beforeDate"
        - $ref: "#/components/schemas/afterDate"
    Unit:
      type: object
      required:
        - code
        - display
      properties:
        code:
          type: string
        display:
          type: string
    AttributeFilter:
      type: object
      description: An AttributeFilter requires different properties, depending on the type. Please refer to the JSON Schema for this.
      required:
        - type
      properties:
        attributeCode:
          $ref: "#/components/schemas/TermCode"
    ValueFilter:
      type: object
      description: A ValueFilter requires different properties, depending on the type. Please refer to the JSON Schema for this.
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - concept
            - quantity-comparator
            - quantity-range
        selectedConcepts:
          type: array
          items:
            $ref: "#/components/schemas/TermCode"
        comparator:
          type: string
          enum:
            - eq
            - ue
            - le
            - lt
            - ge
            - gt
        unit:
          $ref: "#/components/schemas/Unit"
        value:
          type: number
          format: double
        minValue:
          type: number
          format: double
        maxValue:
          type: number
          format: double
    Criterion:
      type: object
      required:
        - termCodes
      properties:
        termCodes:
          type: array
          items:
            $ref: "#/components/schemas/TermCode"
        attributeFilters:
          type: array
          items:
            $ref: "#/components/schemas/AttributeFilter"
        valueFilter:
          $ref: "#/components/schemas/ValueFilter"
        timeRestriction:
          $ref: "#/components/schemas/TimeRestriction"
    CriterionList:
      type: array
      items:
        $ref: "#/components/schemas/Criterion"
  securitySchemes:
    feasibility_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://to.be.defined/auth
          scopes:
            write:query: create and modify queries in your account
            read:query: read your queries
            delete:query: delete your queries
            read:all: read all queries
            delete:all: delete any query
            write:result: write a result for a query/site combination
            read:result: read the results of a query
            delete:result: delete the result of a query
    fdpg_auth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: http://to.be.defined/auth/realms/tbd/protocol/openid-connect/token",
          scopes:
            read:all: read all queries

